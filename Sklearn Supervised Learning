{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMGQF+OGZgC/deUGCN9URVc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"l42uHyImjsSa","executionInfo":{"status":"ok","timestamp":1679879537037,"user_tz":-330,"elapsed":478,"user":{"displayName":"Samuel Mesquita","userId":"01158117141908558003"}},"outputId":"486a47ab-84a6-4f50-c1d5-0efb7d617d95"},"outputs":[{"output_type":"stream","name":"stdout","text":["Coefficients: \n"," [938.23786125]\n","Mean squared error: 2548.07\n","Coefficient of determination: 0.47\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAV0AAADnCAYAAAC9roUQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAQU0lEQVR4nO3dXYxcZR3H8d8ZaClDKTQtBkqdOYI2BI2l6Zr4glQJGiokxkQBGTDxbSJXRhJD8FyYQMZwoUm9UJMlRJPuaTUVbiBwgS+hRLho19iqrUTFnSlWqrzUtB37tnu8ODs9Xboz85zZc545L99PshedeXb2Ycv8+PN/XsYJgkAAADsq454AAJQJoQsAFhG6AGARoQsAFhG6AGDRxYOeXLt2beC6rqWpAEAxTE9PvxEEwVWLPTcwdF3X1d69e9OZFQAUlOM47X7P0V4AAIsIXQCwiNAFAIsIXQCwiNAFAIsIXQA4j+/7cl1XlUpFruvK9/1EX3/gljEAKBPf99VsNtXtdiVJ7XZbzWZTktRoNBL5GVS6ADDP87xzgdvT7XbleV5iP4PQBYB5nU4n1uOjIHQBYF6tVov1+CgIXQCY12q1VK1WFzxWrVbVarUS+xmELgDMazQampycVL1el+M4qtfrmpycTGwRTZKcQZ+RNjExEXDhDQDE4zjOdBAEE4s9R6ULABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBgEaELABYRugBwnt27pUcekfbsSef1CV0Aueb7vlzXVaVSkeu68n0/9mu8+aa0davkONKWLdJ3vyvdcov02mvJz/fi5F8SAOzwfV/NZlPdbleS1G631Ww2JUmNRmPg9waBtG2b9OCDiz9/8mSSM41Q6QLILc/zzgVuT7fbled5fb9nelpas0aqVPoHriRNTUnr1yc10wihCyC3Op2O0ePHjkn33BO2DyYmpLfe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\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","from sklearn import datasets, linear_model\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Load the diabetes dataset\n","diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n","\n","# Use only one feature\n","diabetes_X = diabetes_X[:,np.newaxis,2]\n","\n","# Split the data into training/testing sets\n","diabetes_X_train = diabetes_X[:-20]\n","diabetes_X_test = diabetes_X[-20:]\n","\n","# Split the targets into training/testing sets\n","diabetes_y_train = diabetes_y[:-20]\n","diabetes_y_test = diabetes_y[-20:]\n","\n","# Create linear regression object\n","regr = linear_model.LinearRegression()\n","\n","# Train the model using the training sets\n","regr.fit(diabetes_X_train, diabetes_y_train)\n","\n","# Make predictions using the testing set\n","diabetes_y_pred = regr.predict(diabetes_X_test)\n","\n","# The coefficients\n","print(\"Coefficients: \\n\", regr.coef_)\n","# The mean squared error\n","print(\"Mean squared error: %.2f\" % mean_squared_error(diabetes_y_test, diabetes_y_pred))\n","# The coefficient of determination: 1 is perfect prediction\n","print(\"Coefficient of determination: %.2f\" % r2_score(diabetes_y_test, diabetes_y_pred))\n","\n","# Plot outputs\n","plt.scatter(diabetes_X_test, diabetes_y_test, color=\"black\")\n","plt.plot(diabetes_X_test, diabetes_y_pred, color=\"blue\", linewidth=3)\n","\n","plt.xticks(())\n","plt.yticks(())\n","\n","plt.show()"]}]}